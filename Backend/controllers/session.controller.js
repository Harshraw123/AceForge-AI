import Session from "../models/Session.model.js"
import Question from "../models/Question.model.js";



export const createSession = async (req, res) => {
    try {
        // `questions` is an array of objects containing question and answer generated by AI
      const { role, experience, topicsToFocus, description, questions} = req.body;
      const userId = req.user._id;
  
      const session = await Session.create({
        user: userId,
        role,
        experience,
        topicsToFocus,
        description,
      });
  
      // For each question object, create a new Question document
      const questionDocs = await Promise.all(
        questions.filter(q => q.question && q.answer).map(async (q) => {
          const question = await Question.create({
            session: session._id,
            question: q.question,
            answer: q.answer,
          });
          return question._id;
        })
      );
//MongoDB har document ko automatic _id deta hai.

//Hum sirf us _id ko return karte ja rahe hain.
      session.questions = questionDocs;
      await session.save();
  
      res.status(201).json({ success: true, session });
    } catch (error) {
      res.status(500).json({ success: false, error: error.message });
    }
  };
  
export const getMySessions = async (req, res) => {
    try {
      //.find({ user: req.user._id }) ka matlab hai:

    //Wo saare sessions find karo jinke user field ka value currently logged-in user ka _id ho.

  
        const sessions = await Session.find({ user: req.user._id })
            .populate('questions')
            .sort({ createdAt: -1 });
        
        res.status(200).json({ success: true, sessions });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
};

export const getSessionById = async (req, res) => {
    try {
        const session = await Session.findById(req.params.id).populate('questions');
        if (!session) {
            return res.status(404).json({ 
                success: false, 
                message: 'Session not found'
            });
        }

        res.status(200).json({ success: true, session });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
};

export const deleteSession = async (req, res) => {
    try {
        const session = await Session.findOneAndDelete({
            _id: req.params.id,
            user: req.user._id
        });

        if (!session) {
            return res.status(404).json({ 
                success: false, 
                message: 'Session not found or unauthorized' 
            });
        }

        // Delete associated questions  delete all questionrealted to it
        await Question.deleteMany({ session: req.params.id });

        res.status(200).json({ 
            success: true, 
            message: 'Session and associated questions deleted successfully' 
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
};

export const getAllSessions = async (req, res) => {
    try {
      const sessions = await Session.find()
        .populate("user", "name email") // If you want user info like name/email
        .populate("questions")          // Replace ObjectId with actual question+answer docs
        .sort({ createdAt: -1 });       // Recent first
  
      res.status(200).json({ success: true, sessions });
    } catch (error) {
      res.status(500).json({ success: false, error: error.message });
    }
  };